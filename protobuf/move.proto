syntax = "proto3";

import "google/api/annotations.proto";

message Pipeline {
    string id = 1;
    string user_id = 2;
    string description = 3;
    repeated Pipeline next = 4;
    string gesture_id = 5;
    int64 timeout = 6;
    string name = 7;
    string hook_id = 8;
}

message Gesture {
    string id = 1;
    string description = 2;
    string meta = 3;
    string name = 4;
    string user_id = 5;
}

message Gestures {
    repeated Gesture gestures = 1;
}

message Pipelines {
    repeated Pipeline pipelines = 1;
}

message Hooks {
    repeated Hook hooks = 1;
}

message GestureMessage {
    string user_id = 1;
    string meta = 2;
}

message Hook {
    string id = 1;
    string message = 2;
    string name = 3;
    string description = 4;
    string address = 5;
    string user_id = 6;
}

message Token {
    string token = 1;
}

service Auths {
    rpc Auth (Token) returns (Token) {
        option (google.api.http) = {
			post: "/auth"
			body: "*"
        };
    }
}


service GesturesServ {

    rpc CreateGesture (Gesture) returns (Gesture) {
        option (google.api.http) = {
			post: "/gesture"
			body: "*"
		};
    }

    rpc GetGesture (Gesture) returns (Gesture) {
        option (google.api.http) = {
			get: "/gesture/{id}"
		};
    }

    rpc GetAllGesture (Gesture) returns (Gestures) {
        option (google.api.http) = {
			get: "/gesture"
		};
    }

    rpc DeleteGesture (Gesture) returns (Gesture) {
        option (google.api.http) = {
			delete: "/gesture/{id}"
		};
    }
}

service PipelinesServ {

    rpc CreatePipeline (Pipeline) returns (Pipeline) {
        option (google.api.http) = {
			post: "/pipeline"
			body: "*"
		};
    }

    rpc GetPipeline (Pipeline) returns (Pipeline) {
        option (google.api.http) = {
			get: "/pipeline/{id}"
		};
    }

    rpc GetAllPipeline (Pipeline) returns (Pipelines) {
        option (google.api.http) = {
			get: "/pipeline"
		};
    }

    rpc DeletePipeline (Pipeline) returns (Pipeline) {
        option (google.api.http) = {
			delete: "/pipeline/{id}"
		};
    }
}

service RequestGestureServ {

    rpc PostGesture (GestureMessage) returns (GestureMessage) {
        option (google.api.http) = {
			post: "/request"
			body: "*"
		};
    }
}

service HookServ {

    rpc CreateHook (Hook) returns (Hook) {
        option (google.api.http) = {
			post: "/hook"
			body: "*"
		};
    }

    rpc GetHook (Hook) returns (Hook) {
        option (google.api.http) = {
			get: "/hook/{id}"
		};
    }

    rpc PutHook (Hook) returns (Hook) {
        option (google.api.http) = {
			put: "/hook/{id}"
			body: "*"
		};
    }

    rpc GetAllHook (Hook) returns (Hooks) {
        option (google.api.http) = {
			get: "/hook"
		};
    }
}
