// Code generated by protoc-gen-go.
// source: protobuf/move.proto
// DO NOT EDIT!

/*
Package move is a generated protocol buffer package.

It is generated from these files:
	protobuf/move.proto

It has these top-level messages:
	Pipeline
	Gesture
	Hook
	Token
*/
package move

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pipeline struct {
	Id          string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId      string      `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Next        []*Pipeline `protobuf:"bytes,4,rep,name=next" json:"next,omitempty"`
	GestureId   string      `protobuf:"bytes,5,opt,name=gesture_id,json=gestureId" json:"gesture_id,omitempty"`
	Timeout     int64       `protobuf:"varint,6,opt,name=timeout" json:"timeout,omitempty"`
	Name        string      `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	HookId      string      `protobuf:"bytes,8,opt,name=hook_id,json=hookId" json:"hook_id,omitempty"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pipeline) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pipeline) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Pipeline) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Pipeline) GetNext() []*Pipeline {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *Pipeline) GetGestureId() string {
	if m != nil {
		return m.GestureId
	}
	return ""
}

func (m *Pipeline) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Pipeline) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pipeline) GetHookId() string {
	if m != nil {
		return m.HookId
	}
	return ""
}

type Gesture struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Meta        string `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *Gesture) Reset()                    { *m = Gesture{} }
func (m *Gesture) String() string            { return proto.CompactTextString(m) }
func (*Gesture) ProtoMessage()               {}
func (*Gesture) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Gesture) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Gesture) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gesture) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Gesture) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Hook struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Format      string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *Hook) Reset()                    { *m = Hook{} }
func (m *Hook) String() string            { return proto.CompactTextString(m) }
func (*Hook) ProtoMessage()               {}
func (*Hook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Hook) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Hook) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Hook) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hook) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*Pipeline)(nil), "Pipeline")
	proto.RegisterType((*Gesture)(nil), "Gesture")
	proto.RegisterType((*Hook)(nil), "Hook")
	proto.RegisterType((*Token)(nil), "Token")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auths service

type AuthsClient interface {
	Auth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type authsClient struct {
	cc *grpc.ClientConn
}

func NewAuthsClient(cc *grpc.ClientConn) AuthsClient {
	return &authsClient{cc}
}

func (c *authsClient) Auth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/Auths/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auths service

type AuthsServer interface {
	Auth(context.Context, *Token) (*Token, error)
}

func RegisterAuthsServer(s *grpc.Server, srv AuthsServer) {
	s.RegisterService(&_Auths_serviceDesc, srv)
}

func _Auths_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auths/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsServer).Auth(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auths_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Auths",
	HandlerType: (*AuthsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Auths_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/move.proto",
}

// Client API for Gestures service

type GesturesClient interface {
	CreateGesture(ctx context.Context, in *Gesture, opts ...grpc.CallOption) (*Gesture, error)
	GetGesture(ctx context.Context, in *Gesture, opts ...grpc.CallOption) (*Gesture, error)
}

type gesturesClient struct {
	cc *grpc.ClientConn
}

func NewGesturesClient(cc *grpc.ClientConn) GesturesClient {
	return &gesturesClient{cc}
}

func (c *gesturesClient) CreateGesture(ctx context.Context, in *Gesture, opts ...grpc.CallOption) (*Gesture, error) {
	out := new(Gesture)
	err := grpc.Invoke(ctx, "/Gestures/CreateGesture", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gesturesClient) GetGesture(ctx context.Context, in *Gesture, opts ...grpc.CallOption) (*Gesture, error) {
	out := new(Gesture)
	err := grpc.Invoke(ctx, "/Gestures/GetGesture", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gestures service

type GesturesServer interface {
	CreateGesture(context.Context, *Gesture) (*Gesture, error)
	GetGesture(context.Context, *Gesture) (*Gesture, error)
}

func RegisterGesturesServer(s *grpc.Server, srv GesturesServer) {
	s.RegisterService(&_Gestures_serviceDesc, srv)
}

func _Gestures_CreateGesture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gesture)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).CreateGesture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gestures/CreateGesture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).CreateGesture(ctx, req.(*Gesture))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gestures_GetGesture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gesture)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).GetGesture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gestures/GetGesture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).GetGesture(ctx, req.(*Gesture))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gestures_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Gestures",
	HandlerType: (*GesturesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGesture",
			Handler:    _Gestures_CreateGesture_Handler,
		},
		{
			MethodName: "GetGesture",
			Handler:    _Gestures_GetGesture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/move.proto",
}

// Client API for Pipelines service

type PipelinesClient interface {
	CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	GetPipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
}

type pipelinesClient struct {
	cc *grpc.ClientConn
}

func NewPipelinesClient(cc *grpc.ClientConn) PipelinesClient {
	return &pipelinesClient{cc}
}

func (c *pipelinesClient) CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/Pipelines/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinesClient) GetPipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/Pipelines/GetPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pipelines service

type PipelinesServer interface {
	CreatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	GetPipeline(context.Context, *Pipeline) (*Pipeline, error)
}

func RegisterPipelinesServer(s *grpc.Server, srv PipelinesServer) {
	s.RegisterService(&_Pipelines_serviceDesc, srv)
}

func _Pipelines_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinesServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pipelines/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinesServer).CreatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelines_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinesServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pipelines/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinesServer).GetPipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pipelines_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pipelines",
	HandlerType: (*PipelinesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _Pipelines_CreatePipeline_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _Pipelines_GetPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/move.proto",
}

func init() { proto.RegisterFile("protobuf/move.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x95, 0x1d, 0xdb, 0xb1, 0x27, 0x4a, 0x38, 0xcd, 0x1d, 0x87, 0x15, 0x11, 0x29, 0xda, 0x2a,
	0xba, 0x22, 0x16, 0xa1, 0x00, 0x1d, 0x34, 0x88, 0x22, 0xa4, 0x43, 0x11, 0x3d, 0xf2, 0xdd, 0xce,
	0x25, 0xab, 0x9c, 0xbd, 0x96, 0xbd, 0x46, 0x48, 0xe8, 0x1a, 0x0a, 0x7e, 0x80, 0x4f, 0xa3, 0xa3,
	0xe6, 0x43, 0xd0, 0xae, 0xd7, 0xce, 0x29, 0x96, 0xa0, 0xf2, 0x7b, 0xb3, 0x7e, 0x6f, 0xde, 0xac,
	0xc7, 0x70, 0x5e, 0x94, 0x52, 0xc9, 0x9b, 0xfa, 0x2e, 0xc9, 0xe4, 0x17, 0x5a, 0x1a, 0x36, 0x7d,
	0xbe, 0x93, 0x72, 0x77, 0x4f, 0x49, 0x5a, 0x88, 0x24, 0xcd, 0x73, 0xa9, 0x52, 0x25, 0x64, 0x5e,
	0x35, 0xa7, 0xec, 0xb7, 0x03, 0xe1, 0x47, 0x51, 0xd0, 0xbd, 0xc8, 0x09, 0x27, 0xe0, 0x0a, 0x1e,
	0x3b, 0x73, 0x67, 0x11, 0x6d, 0x5d, 0xc1, 0xf1, 0x19, 0x0c, 0xeb, 0x8a, 0xca, 0xcf, 0x82, 0xc7,
	0xae, 0x29, 0x06, 0x9a, 0x6e, 0x38, 0xce, 0x61, 0xc4, 0xa9, 0xba, 0x2d, 0x45, 0xa1, 0xbd, 0xe2,
	0x81, 0x39, 0x7c, 0x5c, 0xc2, 0x19, 0x78, 0x39, 0x7d, 0x55, 0xb1, 0x37, 0x1f, 0x2c, 0x46, 0xab,
	0x68, 0xd9, 0xf6, 0xd8, 0x9a, 0x32, 0xce, 0x00, 0x76, 0x54, 0xa9, 0xba, 0x24, 0x6d, 0xee, 0x1b,
	0x7d, 0x64, 0x2b, 0x1b, 0x8e, 0x31, 0x0c, 0x95, 0xc8, 0x48, 0xd6, 0x2a, 0x0e, 0xe6, 0xce, 0x62,
	0xb0, 0x6d, 0x29, 0x22, 0x78, 0x79, 0x9a, 0x51, 0x3c, 0x34, 0x12, 0x83, 0x75, 0xcc, 0xbd, 0x94,
	0x07, 0xed, 0x14, 0x36, 0x31, 0x35, 0xdd, 0x70, 0x76, 0x0b, 0xc3, 0x75, 0xe3, 0xd9, 0x1b, 0xed,
	0x64, 0x02, 0xb7, 0x3f, 0x01, 0x82, 0x97, 0x91, 0x4a, 0xed, 0x70, 0x06, 0x77, 0xdd, 0xbd, 0x63,
	0x77, 0xc6, 0xc1, 0xfb, 0x20, 0xe5, 0xa1, 0xd7, 0xe1, 0x12, 0x82, 0x3b, 0x59, 0x66, 0xa9, 0x6a,
	0xef, 0xae, 0x61, 0x9d, 0xc7, 0xe0, 0xd1, 0x04, 0x27, 0x69, 0xbc, 0x5e, 0x1a, 0x36, 0x03, 0xff,
	0x93, 0x3c, 0x50, 0x8e, 0x17, 0xe0, 0x2b, 0x0d, 0x6c, 0xa7, 0x86, 0xac, 0x5e, 0x80, 0xff, 0xae,
	0x56, 0xfb, 0x0a, 0x17, 0xe0, 0x69, 0x80, 0xc1, 0xd2, 0xbc, 0x3e, 0xb5, 0x4f, 0x76, 0xf6, 0xfd,
	0xd7, 0x9f, 0x9f, 0x2e, 0x30, 0x3f, 0x49, 0x6b, 0xb5, 0xbf, 0x76, 0xae, 0x56, 0x0f, 0x10, 0xda,
	0xcb, 0xa9, 0xf0, 0x35, 0x8c, 0xdf, 0x97, 0x94, 0x2a, 0x6a, 0xaf, 0x2b, 0x5c, 0x5a, 0x34, 0xed,
	0x10, 0x3b, 0x37, 0x16, 0x63, 0x16, 0x26, 0xf6, 0x43, 0x5d, 0x3b, 0x57, 0xf8, 0x0a, 0x60, 0x4d,
	0xea, 0x5f, 0xb2, 0xa7, 0x46, 0xf6, 0x04, 0xc7, 0xad, 0x2c, 0xf9, 0x26, 0xf8, 0xc3, 0xea, 0x87,
	0x03, 0x51, 0xbb, 0x14, 0x15, 0xbe, 0x85, 0x49, 0x13, 0xa0, 0xdb, 0xc5, 0xe3, 0xca, 0x4c, 0x8f,
	0x90, 0x5d, 0x18, 0xb3, 0x09, 0x8b, 0x92, 0xc2, 0x96, 0x74, 0x88, 0x37, 0x30, 0x5a, 0x93, 0xfa,
	0x8f, 0xf4, 0xd2, 0x48, 0xcf, 0x70, 0xd2, 0x49, 0x4d, 0x90, 0x9b, 0xc0, 0xfc, 0x08, 0x2f, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x78, 0x69, 0xb5, 0xd6, 0x3d, 0x03, 0x00, 0x00,
}
